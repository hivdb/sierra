/*

    Copyright (C) 2017 Stanford HIVDB team

    Sierra is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Sierra is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package edu.stanford.hivdb.testutils;

import java.util.List;
import java.util.ArrayList;

import edu.stanford.hivdb.mutations.Gene;
import edu.stanford.hivdb.utilities.Sequence;

public class HIV1Sample {

	private static final String originalPR = "CCTCAAATCACCCTTTGGCAACGACCCCTCGTCACAATAAAGATAGGGGGGCAGCTAAAGGAAGCTCTATTAGATACAGGAGCAGATGATACAGTATTAGAAGAAATGAATTTGCCAGGAAGATGGAAACCAAAAATGATAGGGGGAATTGGAGGTTTTATCAAAGTAAGACAGTATGATCAGATACTTATAGAAATTTGTGGACATAAAGCTATAGGTACAGTTTTAGTAGGACCTACACCTGTCAACATAATTGGAAGAAATCTGTTGACCCAGATTGGTTGCACTTTAAATTTT";
	private static final String originalRT = "CCCATTAGTCCTATTGAGACTGTACCAGTAAAATTAAAGCCAGGAATGGATGGCCCAAAAGTTAAACAATGGCCATTGACAGAAGAAAAAATAAAAGCATTAGTAGAAATTTGTACAGAAATGGAAAAGGAGGGGAAAATTTCAAAAATTGGGCCTGAAAATCCATACAATACTCCAGTATTTGCCATAAAGAAAAAGGACAGTACTAAATGGAGAAAATTAGTAGATTTCAGAGAACTTAATAAGAGAACTCAAGACTTCTGGGAAGTTCAATTAGGAATACCACATCCCGCAGGGTTAAAAAAGAAAAAATCAGTAACAGTACTGGATGTGGGTGATGCATATTTTTCAGTTCCCTTAGATAAAGACTTCAGGAAGTATACTGCATTTACCATACCTAGTATAAACAATGAGACACCAGGGATTAGATATCAGTACAATGTGCTTCCACAGGGATGGAAAGGATCACCAGCAATATTCCAAAGTAGCATGACAAAAATCTTAGAACCTTTTAGAAAACAGAATCCAGACATAGTTATCTATCAATATATGGATGATTTGTATGTAGGATCTGACTTAGAAATAGGGCAGCATAGAACAAAAATAGAGGAACTGAGACAACATTTGTTGAGGTGGGGATTTACCACACCAGACAAAAAACATCAGAAAGAACCTCCATTCCTTTGGATGGGTTATGAACTCCATCCTGATAAATGGACAGTACAGCCTATAGTGTTGCCAGAAAAAGACAGTTGGACTGTCAATGATATACAGAAATTAGTGGGAAAACTAAATTGGGCAAGTCAAATTTATGCAGGGATTAAGGTAAAGCAACTGTGTAAGCTCCTCAGGGGGACTAAAGCATTAACAGAAGTAATACCACTGACTGAAGAAGCAGAATTAGAGTTGGCAGAGAACAGGGAGATTCTAAAAGAACCCGTGCATGGAGTATATTATGATCCATCAAAAGACTTAATAGCAGAAATACAGAAACAAGGGCAGGGCCAATGGACATATCAAATTTATCAAGAGCCATTTAAAAATCTAAAAACAGGAAAATATGCCAGAATGAGGGGTGCTCACACTAATGATGTAAAGCAATTAACAGAAGCTGTGCAAAAAATAGCCACAGAAAGCATAGTAATATGGGGAAAGACCCCTAAATTTAAACTACCCATACAAAAAGAAACATGGGAAGCATGGTGGACGGAGTATTGGCAGGCTACCTGGATTCCTGAATGGGAGTTTGTTAATACTCCTCCTCTAGTAAAATTATGGTACCAATTAGAAAAAGAGCCCATAGTAGGAGCAGAGACTTTCTATGTAGATGGGGCAGCTAATAGGGAGACTAAGTTAGGGAAAGCAGGTTATGTCACTGACAGAGGAAGACAAAAGGTAGTTTCCCTAACTGACACAACAAATCAAAAGACTGAATTACAAGCAATCCATTTAGCCTTGCAGGATTCAGGATTAGAAGTAAATATAGTAACAGACTCACAATATGCATTAGGAATCATTCAGGCACAACCAGACAAGAGTGAATCAGAACTAGTCAGCCAAATAATAGAGCAGCTAATAAAGAAGGAAAAAGTCTACCTGGCATGGGTACCAGCACACAAGGGGATTGGAGGAAATGAACAAGTAGATAAATTAGTCAGTGCAGGAATCAGAAAGGTGCTA";
	private static final String originalIN = "TTTTTAGATGGAATAGATAAGGCCCAAGAAGAACATGAAAAATATCACAGTAATTGGAGAGCAATGGCTAGTGATTTTAACCTGCCTCCTGTAGTAGCAAAAGAAATAGTGGCCAGCTGTGATAAGTGTCAGCTAAAAGGAGAAGCCATGCATGGACAAGTAGACTGTAGTCCAGGAATATGGCAGCTAGATTGTACCCACTTAGAGGGAAAAATTATCCTGGTAGCAGTTCATGTAGCCAGTGGATATATAGAAGCAGAAGTTATTCCAGCAGAGACAGGGCAAGAAACAGCATATTTTCTCTTAAAATTAGCAGGAAGATGGCCAGTAAAAACAATCCATACAGACAATGGCAGCAATTTCACCAGTACTACGGTGAAGGCCGCCTGCTGGTGGGCGGGGATCAAGCAGGAATTTGGCATTCCCTACAATCCCCAAAGTCAAGGAGTGGTAGAATCTATGAATAAAGAATTAAAGAAAATTATAGGACAGGTAAGAGATCAGGCTGAACATCTTAAAACAGCAGTACAAATGGCAGTATTCATCCACAATTTTAAGAGAAAAGGGGGGATTGGGGGGTACAGTGCAGGGGAAAGAATAGTAGACATAATAGCAACAGACATACAAACTAAAGAACTACAAAAACAAATTACAAAAATTCAAAATTTTCGGGTTTATTACAGGGACAGCAGAGATCCACTTTGGAAAGGACCAGCAAAGCTGCTCTGGAAAGGTGAAGGGGCAGTAGTAATACAAGATAATAGTGACATAAAAGTAGTGCCAAGAAGAAAAGCAAAAATCATTAGGGATTATGGAAAACAGATGGCAGGCGATGATTGTGTGGCAAGTAGACAGGATGAGGAT";
	private List<SampleSubstitution> subPR = new ArrayList<>();
	private List<SampleSubstitution> subRT = new ArrayList<>();
	private List<SampleSubstitution> subIN = new ArrayList<>();

	public HIV1Sample() {
		// do nothing
	}

	public void addSubstitutionRule(
			Gene gene, int startPos, int endPos, String replaceTo) {
		SampleSubstitution sub =
			new SampleSubstitution(startPos, endPos, replaceTo);
		switch (gene) {
			case PR:
				subPR.add(sub);
				break;
			case RT:
				subRT.add(sub);
				break;
			case IN:
				subIN.add(sub);
				break;
		}
	}

	public void addSubstitutionRules(
			Gene[] geneArr, int[] startPosArr,
			int[] endPosArr, String[] replaceToArr) {
		for (int i=0; i< geneArr.length; i ++) {
			addSubstitutionRule(
				geneArr[i], startPosArr[i], endPosArr[i], replaceToArr[i]);
		}
	}

	public void cleanSubstitutionRules(Gene gene) {
		switch (gene) {
			case PR:
				subPR.clear();
				break;
			case RT:
				subRT.clear();
				break;
			case IN:
				subIN.clear();
				break;
		}
	}

	public String getSampleString() {
		return getPR() + getRT() + getIN();
	}

	public String getPR() {
		StringBuilder r = new StringBuilder(originalPR);
		for (SampleSubstitution sub: subPR) {
			r = sub.apply(r);
		}
		return r.toString();
	}

	public String getRT() {
		StringBuilder r = new StringBuilder(originalRT);
		for (SampleSubstitution sub: subRT) {
			r = sub.apply(r);
		}
		return r.toString();
	}

	public String getIN() {
		StringBuilder r = new StringBuilder(originalIN);
		for (SampleSubstitution sub: subIN) {
			r = sub.apply(r);
		}
		return r.toString();
	}

	public String getByGene(Gene gene) {
		String r = null;
		switch (gene) {
			case PR:
				r = getPR();
				break;
			case RT:
				r = getRT();
				break;
			case IN:
				r = getIN();
				break;
		}
		return r;
	}

	public Sequence getSequence(String name) {
		return new Sequence(name, getSampleString());
	}

	public Sequence getSequence() {
		return getSequence("test");
	}
}
